# app.py
# Pro styled bilingual dashboard ‚Äî 3-level gauge (Low / Moderate / High)
# Real XGBoost ML model for stillbirth risk prediction
# PDF export: branded header, risk badge, 3-segment gauge with labels, inputs table.
import math
import io
import os
import base64
from datetime import datetime
import pandas as pd
import streamlit as st
from openai import OpenAI
from dotenv import load_dotenv
import preprocessing  # Import our preprocessing module with XGBoost model

# Load environment variables from .env file
load_dotenv()

# ---- OpenRouter LLM Setup ----
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("OPENROUTER_API_KEY"),
)
MODEL = os.getenv("OPENROUTER_MODEL", "openai/gpt-oss-20b:free")

# ---- PDF deps ----
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.units import mm
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# ---- Arabic text support ----
try:
    from arabic_reshaper import reshape
    from bidi.algorithm import get_display
    ARABIC_SUPPORT = True
except ImportError:
    ARABIC_SUPPORT = False
    st.warning("‚ö†Ô∏è For proper Arabic text in PDFs, install: pip install arabic-reshaper python-bidi")

st.set_page_config(page_title="Stillbirth Risk Assessment", page_icon="üè•", layout="wide")

# =============================
# Styling (green theme + lab-style 3-level gauge)
# =============================
st.markdown("""
<style>
:root{
  --bg1: linear-gradient(135deg, #f0fdf4 0%, #ecfdf5 50%, #f0f9ff 100%);
  --bg2: linear-gradient(135deg, #f0fdf4 0%, #ecfdf5 50%, #f0f9ff 100%);
  --text: #0f172a;
  --muted: #475569;

  --card: rgba(255,255,255,0.95);
  --card-border: rgba(34, 197, 94, 0.2);
  --shadow: 0 8px 30px rgba(16, 185, 129, 0.15);

  --low-start: #22c55e;
  --low-end: #16a34a;
  --mod-start: #f59e0b;
  --mod-end: #d97706;
  --high-start: #ef4444;
  --high-end: #dc2626;

  --accent-primary: #10b981;
  --accent-secondary: #059669;
  --gradient-primary: linear-gradient(135deg, #10b981 0%, #059669 100%);
  --gradient-success: linear-gradient(135deg, #10b981 0%, #059669 100%);
  --gradient-warning: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
  --gradient-danger: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
  --gradient-professional: linear-gradient(135deg, #10b981 0%, #059669 50%, #047857 100%);
}

[data-testid="stAppViewContainer"]{
  background: var(--bg1);
  color: var(--text);
  font-family: 'Inter', 'Tajawal', sans-serif;
}

.hero {
  background: rgba(255, 255, 255, 0.95);
  color: var(--text);
  padding: 32px 40px;
  border-radius: 24px;
  box-shadow: var(--shadow);
  position: relative;
  overflow: hidden;
  border: 2px solid rgba(16, 185, 129, 0.1);
  display: flex;
  align-items: center;
  gap: 24px;
}

.hero::before {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 200%;
  height: 200%;
  background: radial-gradient(circle, rgba(16, 185, 129, 0.08) 0%, transparent 70%);
  animation: float 6s ease-in-out infinite;
  z-index: 0;
}

@keyframes float {
  0%, 100% { transform: translateY(0px) rotate(0deg); }
  50% { transform: translateY(-10px) rotate(180deg); }
}

.hero-logo {
  width: 120px;
  height: 120px;
  object-fit: contain;
  border-radius: 20px;
  box-shadow: 0 6px 20px rgba(16, 185, 129, 0.2);
  border: none;
  background: transparent;
  padding: 0;
  transition: all 0.3s ease;
  position: relative;
  z-index: 1;
  flex-shrink: 0;
  animation: logoPulsate 2s ease-in-out infinite;
}

.hero-logo:hover {
  transform: scale(1.05);
  box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
  animation-play-state: paused;
}

@keyframes logoPulsate {
  0%, 100% {
    transform: scale(1);
    box-shadow: 0 6px 20px rgba(16, 185, 129, 0.2);
  }
  50% {
    transform: scale(1.08);
    box-shadow: 0 8px 30px rgba(16, 185, 129, 0.4);
  }
}

.hero-logo-placeholder {
  width: 120px;
  height: 120px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 3rem;
  border-radius: 20px;
  box-shadow: 0 6px 20px rgba(16, 185, 129, 0.2);
  border: 3px solid rgba(16, 185, 129, 0.2);
  background: rgba(16, 185, 129, 0.05);
  position: relative;
  z-index: 1;
  flex-shrink: 0;
  animation: logoPulsate 2s ease-in-out infinite;
}

.hero-content {
  flex: 1;
  position: relative;
  z-index: 1;
}

.hero h1 {
  margin: 0 0 12px 0;
  font-size: 2.3rem;
  font-weight: 800;
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.hero .sub {
  color: var(--muted);
  font-size: 1.2rem;
  font-weight: 500;
  line-height: 1.6;
}

.lab-wrap {
  position: relative;
  border: 2px solid var(--card-border);
  border-radius: 20px;
  padding: 28px 26px;
  background: var(--card);
  backdrop-filter: blur(10px);
  box-shadow: var(--shadow);
  background-image:
    radial-gradient(circle at 100% 0%, rgba(16, 185, 129, 0.06) 0%, transparent 50%),
    radial-gradient(circle at 0% 100%, rgba(34, 197, 94, 0.06) 0%, transparent 50%);
}

.lab-head {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
}

.lab-name {
  font-weight: 800;
  letter-spacing: 0.3px;
  font-size: 1.4rem;
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.lab-ref {
  color: var(--muted);
  font-size: 1.1rem;
  font-weight: 600;
}

.lab-band {
  display: flex;
  gap: 4px;
  align-items: center;
  margin-top: 20px;
  position: relative;
  height: 20px;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: inset 0 2px 6px rgba(0,0,0,0.1);
  border: 1px solid rgba(16, 185, 129, 0.2);
}

.seg {
  height: 100%;
  border-radius: 0;
  position: relative;
  transition: all 0.3s ease;
}

.seg.green {
  background: linear-gradient(90deg, var(--low-start), var(--low-end));
  box-shadow: inset 0 1px 3px rgba(255,255,255,0.4);
}

.seg.amber {
  background: linear-gradient(90deg, var(--mod-start), var(--mod-end));
  box-shadow: inset 0 1px 3px rgba(255,255,255,0.4);
}

.seg.red {
  background: linear-gradient(90deg, var(--high-start), var(--high-end));
  box-shadow: inset 0 1px 3px rgba(255,255,255,0.4);
}

.seg:hover {
  filter: brightness(1.1);
  transform: scaleY(1.1);
}

.lab-labels {
  display: flex;
  justify-content: space-between;
  color: var(--muted);
  font-size: 1rem;
  margin-top: 16px;
  font-weight: 700;
}

.marker {
  position: relative;
  height: 52px;
  transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.marker .pin {
  position: absolute;
  top: -14px;
  transform: translateX(-50%);
  width: 0;
  height: 0;
  border-left: 12px solid transparent;
  border-right: 12px solid transparent;
  border-top: 18px solid #10b981;
  filter: drop-shadow(0 3px 6px rgba(16, 185, 129, 0.4));
  transition: all 0.3s ease;
}

.marker .pill {
  position: absolute;
  top: 10px;
  transform: translateX(-50%);
  background: linear-gradient(135deg, #10b981, #059669);
  color: #fff;
  padding: 0.5rem 1.4rem;
  border-radius: 999px;
  font-weight: 900;
  font-size: 1.1rem;
  box-shadow: 0 6px 16px rgba(16, 185, 129, 0.4);
  border: 2px solid rgba(255,255,255,0.15);
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { transform: translateX(-50%) scale(1); }
  50% { transform: translateX(-50%) scale(1.05); }
}

.stTextInput>div>div>input, .stNumberInput>div>div>input, .stSelectbox>div>div>select {
  border-radius: 14px;
  border: 2px solid #e2e8f0;
  transition: all 0.3s ease;
  background: rgba(255,255,255,0.95);
  padding: 12px 16px;
  font-size: 1rem;
}

.stTextInput>div>div>input:focus, .stNumberInput>div>div>input:focus, .stSelectbox>div>div>select:focus {
  border-color: var(--accent-primary);
  box-shadow: 0 0 0 4px rgba(16, 185, 129, 0.15);
  background: rgba(255,255,255,1);
}

.stButton>button {
  border-radius: 14px;
  border: none;
  background: var(--gradient-primary);
  color: white;
  font-weight: 700;
  padding: 1rem 2rem;
  transition: all 0.3s ease;
  box-shadow: 0 6px 20px rgba(16, 185, 129, 0.35);
  font-size: 1.1rem;
}

.stButton>button:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 25px rgba(16, 185, 129, 0.45);
  background: linear-gradient(135deg, #059669 0%, #047857 100%);
}

.stDownloadButton>button {
  border-radius: 14px;
  border: none;
  background: var(--gradient-success);
  color: white;
  font-weight: 700;
  padding: 1rem 2rem;
  transition: all 0.3s ease;
  box-shadow: 0 6px 20px rgba(16, 185, 129, 0.35);
  font-size: 1.1rem;
}

.stDownloadButton>button:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 25px rgba(16, 185, 129, 0.45);
}

.dataframe {
  border-radius: 20px;
  overflow: hidden;
  box-shadow: var(--shadow);
  border: 1px solid rgba(16, 185, 129, 0.1);
}

hr.soft {
  border: none;
  height: 2px;
  background: linear-gradient(90deg, transparent, var(--accent-primary), transparent);
  margin: 2.5rem 0;
}

.small {
  color: var(--muted);
  font-size: 0.95rem;
  text-align: center;
  margin-top: 16px;
  font-style: italic;
}

.risk-badge {
  padding: 0.5rem 1rem;
  border-radius: 999px;
  font-weight: 700;
  font-size: 0.9rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.risk-low {
  background: var(--gradient-success);
  color: white;
}

.risk-mod {
  background: var(--gradient-warning);
  color: white;
}

.risk-high {
  background: var(--gradient-danger);
  color: white;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.lab-wrap, .hero, .dashboard-card {
  animation: fadeInUp 0.6s ease-out;
}

[data-testid="stSidebar"] {
  background: linear-gradient(180deg, #f0fdf4 0%, #ecfdf5 100%);
  border-right: 2px solid rgba(16, 185, 129, 0.1);
}

::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: var(--accent-primary);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #059669;
}

.stForm {
  background: var(--card);
  backdrop-filter: blur(10px);
  border-radius: 24px;
  padding: 32px;
  box-shadow: var(--shadow);
  border: 2px solid var(--card-border);
  background-image:
    radial-gradient(circle at 100% 0%, rgba(16, 185, 129, 0.06) 0%, transparent 50%),
    radial-gradient(circle at 0% 100%, rgba(34, 197, 94, 0.06) 0%, transparent 50%);
}

.history-container {
  background: var(--card);
  backdrop-filter: blur(10px);
  border-radius: 24px;
  padding: 32px;
  box-shadow: var(--shadow);
  border: 2px solid var(--card-border);
  margin-top: 2.5rem;
  background-image:
    radial-gradient(circle at 0% 0%, rgba(16, 185, 129, 0.06) 0%, transparent 50%),
    radial-gradient(circle at 100% 100%, rgba(34, 197, 94, 0.06) 0%, transparent 50%);
}

.download-history-btn button {
  border-radius: 14px;
  border: none;
  background: var(--gradient-professional) !important;
  color: white !important;
  font-weight: 700;
  padding: 1rem 2rem;
  transition: all 0.3s ease;
  box-shadow: 0 6px 20px rgba(16, 185, 129, 0.4);
  font-size: 1.1rem;
}

.download-history-btn button:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 25px rgba(16, 185, 129, 0.5);
  filter: brightness(1.05);
}

/* Statistics Cards */
.stats-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 16px;
  margin: 24px 0;
}

.stat-card {
  background: rgba(255, 255, 255, 0.95);
  border-radius: 16px;
  padding: 20px;
  text-align: center;
  box-shadow: 0 8px 30px rgba(16, 185, 129, 0.15);
  border: 2px solid rgba(16, 185, 129, 0.1);
  transition: all 0.3s ease;
}

.stat-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 12px 30px rgba(16, 185, 129, 0.2);
}

.stat-number {
  font-size: 2.2rem;
  font-weight: 800;
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  display: block;
  margin-bottom: 8px;
}

.stat-title {
  font-size: 1rem;
  color: var(--muted);
  font-weight: 600;
}

/* Dashboard Cards */
.dashboard-container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 20px;
  margin-bottom: 30px;
}

.dashboard-card {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 24px;
  box-shadow: 0 8px 30px rgba(16, 185, 129, 0.15);
  border: 2px solid rgba(16, 185, 129, 0.1);
  text-align: center;
  transition: all 0.3s ease;
  cursor: pointer;
}

.dashboard-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 16px 40px rgba(16, 185, 129, 0.25);
  border-color: rgba(16, 185, 129, 0.3);
}

.dashboard-icon {
  font-size: 2.8rem;
  margin-bottom: 16px;
  color: var(--accent-primary);
}

.dashboard-title {
  font-weight: 800;
  font-size: 1.3rem;
  margin-bottom: 12px;
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.dashboard-desc {
  color: var(--muted);
  font-size: 0.95rem;
  line-height: 1.5;
}

/* Dashboard Button Styling */
div[data-testid="column"] > div > button[key="lab_btn"],
div[data-testid="column"] > div > button[key="med_btn"],
div[data-testid="column"] > div > button[key="rec_btn"] {
  height: 180px !important;
  white-space: pre-line !important;
  font-size: 1rem !important;
  line-height: 1.6 !important;
  background: rgba(255, 255, 255, 0.95) !important;
  border: 2px solid rgba(16, 185, 129, 0.15) !important;
  color: var(--text) !important;
  box-shadow: 0 8px 30px rgba(16, 185, 129, 0.15) !important;
}

div[data-testid="column"] > div > button[key="lab_btn"]:hover,
div[data-testid="column"] > div > button[key="med_btn"]:hover,
div[data-testid="column"] > div > button[key="rec_btn"]:hover {
  transform: translateY(-5px) !important;
  box-shadow: 0 16px 40px rgba(16, 185, 129, 0.25) !important;
  border-color: rgba(16, 185, 129, 0.3) !important;
  background: rgba(255, 255, 255, 1) !important;
}

.section-header {
  color: #000000;
  font-size: 2rem;
  font-weight: 800;
  margin: 2rem 0 1rem 0;
}

/* Required Field Styling */
label:has(+ div input[aria-label*="*"]),
div[data-testid="stTextInput"] label:contains("*") {
  font-weight: 600;
}

/* Responsive Design */
@media (max-width: 768px) {
  .hero {
    flex-direction: column !important;
    text-align: center;
    padding: 24px;
  }
  
  .hero-content {
    text-align: center !important;
  }
  
  .hero h1 {
    font-size: 1.8rem;
  }
  
  .hero .sub {
    font-size: 1rem;
  }
  
  .stats-container {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .dashboard-container {
    grid-template-columns: 1fr;
  }
}
</style>
""", unsafe_allow_html=True)

# =============================
# Language
# =============================
lang = st.sidebar.radio("Language / ÿßŸÑŸÑÿ∫ÿ©", ["English", "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"], horizontal=True, index=0)
AR = (lang == "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©")

def L(en, ar):
    return ar if AR else en

# ===== RTL layout when Arabic is active (keep sidebar mechanics working) =====
if AR:
    st.markdown("""
    <style>
    .block-container, .stMain { direction: rtl; }
    [data-testid="stAppViewContainer"] { direction: ltr; }
    [data-testid="stSidebar"] { direction: ltr; }
    [data-testid="stSidebar"] .stRadio { direction: rtl; text-align: right; }
    [data-testid="collapsedControl"] {
      right: 12px !important;
      left: auto !important;
      direction: ltr;
      z-index: 9999;
      pointer-events: auto;
    }
    .hero { 
      flex-direction: row-reverse;
    }
    .hero-content {
      text-align: right;
    }
    .hero h1, .hero .sub { text-align: right; }
    .stMarkdown, .stText { text-align: right; }
    label, .stTextInput, .stNumberInput, .stSelectbox, .stDateInput, .stTimeInput { text-align: right; }
    .lab-head { flex-direction: row-reverse; }
    .lab-labels { direction: rtl; }
    .small { text-align: right; }
    .stat-card, .dashboard-card { direction: rtl; }
    </style>
    """, unsafe_allow_html=True)
else:
    st.markdown("""
    <style>
    .block-container, .stMain { direction: ltr; }
    [data-testid="stAppViewContainer"] { direction: ltr; }
    [data-testid="stSidebar"] { direction: ltr; }
    .hero { 
      flex-direction: row;
    }
    .hero-content {
      text-align: left;
    }
    </style>
    """, unsafe_allow_html=True)

# =============================
# App State (History)
# =============================
if "history" not in st.session_state:
    st.session_state.history = pd.DataFrame(columns=[
        "timestamp", "patient_id", "patient_name",
        "risk_level", "score_pct", "explanation",
        "gestational_weeks", "babyweight", "bmi", "height",
        "systolic_bp", "diastolic_bp", "prenatal_visits",
        "emergency_visits", "inpatient_visits",
        "diabetes", "hypertension", "twins", "deliverytype"
    ])

# =============================
# Statistics Calculation
# =============================
def calculate_statistics():
    """Calculate statistics from the history"""
    df = st.session_state.history
    if len(df) == 0:
        return {
            "total_cases": 0,
            "low_risk": 0,
            "moderate_risk": 0,
            "high_risk": 0,
            "avg_score": 0
        }
    
    total_cases = len(df)
    
    # Count risk levels - handle both English and Arabic
    low_risk = len(df[df["risk_level"].str.contains("Low|ŸÖŸÜÿÆŸÅÿ∂", case=False, na=False)])
    moderate_risk = len(df[df["risk_level"].str.contains("Moderate|ŸÖÿ™Ÿàÿ≥ÿ∑", case=False, na=False)])
    high_risk = len(df[df["risk_level"].str.contains("High|ŸÖÿ±ÿ™ŸÅÿπ", case=False, na=False)])
    
    avg_score = df["score_pct"].mean() if total_cases > 0 else 0
    
    return {
        "total_cases": total_cases,
        "low_risk": low_risk,
        "moderate_risk": moderate_risk,
        "high_risk": high_risk,
        "avg_score": round(avg_score, 1)
    }

# =============================
# XGBoost Model Integration
# =============================

def band_from_percent(pct):
    if pct <= 33:
        return (L("Low", "ŸÖŸÜÿÆŸÅÿ∂"), "low")
    if pct <= 66:
        return (L("Moderate", "ŸÖÿ™Ÿàÿ≥ÿ∑"), "mod")
    return (L("High", "ŸÖÿ±ÿ™ŸÅÿπ"), "high")

def openrouter_explain_risk(band_text, pct, inputs, arabic=False):
    """
    Use GPT-OSS-20B from OpenRouter to explain the risk level.
    Returns up to 4 short bullet points.
    """
    language = "Arabic" if arabic else "English"
    system_prompt = (
        "You are a clinical assistant explaining stillbirth risk levels "
        "in 2‚Äì4 short, factual bullet points. "
        "Avoid diagnosis or treatment; focus on explaining the contributing factors."
    )

    user_prompt = f"""
    Language: {language}
    Risk Level: {band_text} ({pct}%)
    Inputs: {inputs}
    """

    completion = client.chat.completions.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        temperature=0.2,
        max_tokens=200,
        extra_headers={
            "HTTP-Referer": "https://yourappname.streamlit.app",
            "X-Title": "Stillbirth Risk Assessment"
        }
    )

    text = completion.choices[0].message.content.strip()
    bullets = [line.strip("-‚Ä¢ ") for line in text.split("\n") if line.strip()]
    return bullets[:4] or [text]

def explanation_for_band(d, band_text, user_input=None):
    """Fallback explanation when LLM is unavailable"""
    base_map = {
        "High": "High risk ‚Äî increase monitoring.",
        "Moderate": "Moderate risk ‚Äî tighten follow-up.",
        "Low": "Low risk ‚Äî continue standard care.",
        "ŸÖÿ±ÿ™ŸÅÿπ": "ÿÆÿ∑ÿ± ŸÖÿ±ÿ™ŸÅÿπ ‚Äî ÿπÿ≤Ÿëÿ≤ ÿßŸÑŸÖÿ±ÿßŸÇÿ®ÿ©.",
        "ŸÖÿ™Ÿàÿ≥ÿ∑": "ÿÆÿ∑ÿ± ŸÖÿ™Ÿàÿ≥ÿ∑ ‚Äî ÿ¥ÿØÿØ ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ©.",
        "ŸÖŸÜÿÆŸÅÿ∂": "ÿÆÿ∑ÿ± ŸÖŸÜÿÆŸÅÿ∂ ‚Äî ÿßÿ≥ÿ™ŸÖÿ± ÿ®ÿßŸÑÿ±ÿπÿßŸäÿ© ÿßŸÑŸÖÿπÿ™ÿßÿØÿ©.",
    }
    notes = []
    
    # Use user_input if available, otherwise use d
    input_data = user_input if user_input else d
    
    if input_data.get("gestational_weeks", 39) < 34:
        notes.append(L("Preterm pregnancy detected.", "ÿ≠ŸÖŸÑ ŸÖÿ®ŸÉÿ±."))
    if input_data.get("babyweight", 3.2) < 2.5:
        notes.append(L("Low birth weight detected.", "Ÿàÿ≤ŸÜ ŸÖŸÜÿÆŸÅÿ∂ ÿπŸÜÿØ ÿßŸÑŸàŸÑÿßÿØÿ©."))
    if input_data.get("systolic_bp", 120) >= 140 or input_data.get("diastolic_bp", 75) >= 90:
        notes.append(L("Elevated blood pressure.", "ÿ∂ÿ∫ÿ∑ ÿØŸÖ ŸÖÿ±ÿ™ŸÅÿπ."))
    if str(input_data.get("diabetes", "no")).lower() in ["yes", "ŸÜÿπŸÖ"]:
        notes.append(L("Diabetes present.", "Ÿàÿ¨ŸàÿØ ÿ≥ŸÉÿ±Ÿä."))
    if str(input_data.get("hypertension", "no")).lower() in ["yes", "ŸÜÿπŸÖ"]:
        notes.append(L("Hypertension present.", "ÿßÿ±ÿ™ŸÅÿßÿπ ÿ∂ÿ∫ÿ∑ ÿßŸÑÿØŸÖ."))
    if input_data.get("prenatal_visits", 4) < 3:
        notes.append(L("Limited prenatal care.", "ŸÇŸÑŸëÿ© ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ© ŸÇÿ®ŸÑ ÿßŸÑŸàŸÑÿßÿØÿ©."))
    if input_data.get("bmi", 27.0) >= 30:
        notes.append(L("Elevated BMI.", "ÿßÿ±ÿ™ŸÅÿßÿπ ŸÖÿ§ÿ¥ÿ± ŸÉÿ™ŸÑÿ© ÿßŸÑÿ¨ÿ≥ŸÖ."))
    if input_data.get("total_emergency_visits", 0) > 2:
        notes.append(L("Multiple emergency visits.", "ÿ≤Ÿäÿßÿ±ÿßÿ™ ÿ∑Ÿàÿßÿ±ÿ¶ ŸÖÿ™ÿπÿØÿØÿ©."))
    if input_data.get("hba1c_mean", 0) > 6.5:
        notes.append(L("Elevated HbA1c levels.", "ÿßÿ±ÿ™ŸÅÿßÿπ ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ™ÿ±ÿßŸÉŸÖŸä."))
    
    return [base_map[band_text]] + notes[:4]

# =============================
# PDF helpers (nicer layout)
# =============================
BRAND_NAME_EN = "Stillbirth Risk Assessment"
BRAND_NAME_AR = "ÿ™ŸÇŸäŸäŸÖ ÿÆÿ∑ÿ± ÿßŸÑÿ¨ŸÜŸäŸÜ"

def _arabic_text(text):
    """Reshape Arabic text for proper display in PDF"""
    if not text or not ARABIC_SUPPORT:
        return text
    try:
        # Check if text contains Arabic characters
        if any('\u0600' <= c <= '\u06FF' for c in str(text)):
            reshaped = reshape(str(text))
            bidi_text = get_display(reshaped)
            return bidi_text
    except:
        pass
    return text

def _setup_pdf_font(use_arabic):
    if use_arabic:
        # Try multiple font paths for Arabic support
        font_paths = [
            "NotoNaskhArabic-Regular.ttf",
            "C:/Windows/Fonts/arial.ttf",
            "C:/Windows/Fonts/tahoma.ttf",
            "C:/Windows/Fonts/simpo.ttf",
            "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
            "arial.ttf"
        ]
        
        for ttf in font_paths:
            if os.path.exists(ttf):
                try:
                    pdfmetrics.registerFont(TTFont("ArabicFont", ttf))
                    return "ArabicFont"
                except:
                    continue
        
        # Fallback: Try to use Helvetica but warn
        if not ARABIC_SUPPORT:
            st.warning("‚ö†Ô∏è Arabic font not found. PDF may not display Arabic text correctly.")
    
    return "Helvetica"

def _wrap_lines(c, text, max_width, font, size):
    c.setFont(font, size)
    words = str(text).split()
    lines, cur = [], ""
    for w in words:
        probe = (cur + " " + w).strip()
        if pdfmetrics.stringWidth(probe, font, size) <= max_width:
            cur = probe
        else:
            if cur:
                lines.append(cur)
            cur = w
    if cur:
        lines.append(cur)
    return lines or [""]

def _draw_header(c, W, H, AR, font):
    # Light green matching website background
    c.setFillColor(colors.HexColor("#ecfdf5"))  # Soft green matching site background
    c.rect(0, H - 40 * mm, W, 40 * mm, stroke=0, fill=1)
    
    # Try to add logo
    try:
        logo_paths = ["Streamlit/AI4Life.png", "AI4Life.png"]
        for logo_path in logo_paths:
            if os.path.exists(logo_path):
                c.drawImage(logo_path, 20 * mm, H - 38 * mm, width=25 * mm, height=25 * mm, preserveAspectRatio=True, mask='auto')
                break
    except:
        pass
    
    # Dark text for light background
    c.setFillColor(colors.HexColor("#0f172a"))  # Dark slate for better contrast
    c.setFont(font, 18)
    title = _arabic_text(BRAND_NAME_AR) if AR else BRAND_NAME_EN
    # For Arabic (RTL), draw from right side
    if AR:
        title_width = pdfmetrics.stringWidth(title, font, 18)
        c.drawString(W - 20 * mm - title_width, H - 26 * mm, title)
    else:
        c.drawString(50 * mm, H - 26 * mm, title)
    
    c.setFont(font, 10)
    c.setFillColor(colors.HexColor("#475569"))  # Muted gray for subtitle
    subtitle = "Risk assessment report" if not AR else _arabic_text("ÿ™ŸÇÿ±Ÿäÿ± ÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿÆÿ∑Ÿàÿ±ÿ©")
    if AR:
        subtitle_width = pdfmetrics.stringWidth(subtitle, font, 10)
        c.drawString(W - 20 * mm - subtitle_width, H - 32 * mm, subtitle)
    else:
        c.drawString(50 * mm, H - 32 * mm, subtitle)

def _draw_badge(c, x, y, band_code, band_text, font):
    colors_map = {"low": "#16a34a", "mod": "#d97706", "high": "#dc2626"}
    c.setFillColor(colors.HexColor(colors_map[band_code]))
    c.roundRect(x, y, 42 * mm, 10 * mm, 5 * mm, stroke=0, fill=1)
    # Add subtle border
    c.setStrokeColor(colors.HexColor(colors_map[band_code]))
    c.setLineWidth(0.5)
    c.roundRect(x, y, 42 * mm, 10 * mm, 5 * mm, stroke=1, fill=0)
    c.setFillColor(colors.white)
    c.setFont(font, 11)
    c.drawCentredString(x + 21 * mm, y + 3.2 * mm, _arabic_text(str(band_text)))

def _draw_gauge(c, x, y, w, h, pct, font, AR):
    if AR:
        # Arabic (RTL): High (red) on left, Low (green) on right
        c.setFillColor(colors.HexColor("#fecaca"))  # High/Red
        c.rect(x, y, w * 0.33, h, stroke=0, fill=1)
        c.setFillColor(colors.HexColor("#fde68a"))  # Moderate/Yellow
        c.rect(x + w * 0.33, y, w * 0.34, h, stroke=0, fill=1)
        c.setFillColor(colors.HexColor("#86efac"))  # Low/Green
        c.rect(x + w * 0.67, y, w * 0.33, h, stroke=0, fill=1)
    else:
        # English (LTR): Low (green) on left, High (red) on right
        c.setFillColor(colors.HexColor("#86efac"))  # Low/Green
        c.rect(x, y, w * 0.33, h, stroke=0, fill=1)
        c.setFillColor(colors.HexColor("#fde68a"))  # Moderate/Yellow
        c.rect(x + w * 0.33, y, w * 0.34, h, stroke=0, fill=1)
        c.setFillColor(colors.HexColor("#fecaca"))  # High/Red
        c.rect(x + w * 0.67, y, w * 0.33, h, stroke=0, fill=1)
    
    # Green border matching website theme
    c.setStrokeColor(colors.HexColor("#10b981"))
    c.setLineWidth(1.5)
    c.rect(x, y, w, h, stroke=1, fill=0)
    c.setFont(font, 9)
    c.setFillColor(colors.HexColor("#334155"))
    
    if AR:
        # Arabic labels (RTL): High - Moderate - Low
        labels = [_arabic_text("ŸÖÿ±ÿ™ŸÅÿπ"), _arabic_text("ŸÖÿ™Ÿàÿ≥ÿ∑"), _arabic_text("ŸÖŸÜÿÆŸÅÿ∂")]
        c.drawString(x, y - 5 * mm, labels[0])  # High on left
        c.drawCentredString(x + w * 0.50, y - 5 * mm, labels[1])  # Moderate center
        c.drawRightString(x + w, y - 5 * mm, labels[2])  # Low on right
    else:
        # English labels (LTR): Low - Moderate - High
        c.drawString(x, y - 5 * mm, "Low")
        c.drawCentredString(x + w * 0.50, y - 5 * mm, "Moderate")
        c.drawRightString(x + w, y - 5 * mm, "High")
    
    # Draw marker - reverse position for Arabic
    if AR:
        marker_pos = x + ((100 - max(2, min(98, pct))) / 100.0) * w
    else:
        marker_pos = x + (max(2, min(98, pct)) / 100.0) * w
    
    # Green marker line matching website theme
    c.setStrokeColor(colors.HexColor("#10b981"))
    c.setLineWidth(3)
    c.line(marker_pos, y - 2 * mm, marker_pos, y + h + 2 * mm)
    c.setFont(font, 9)
    c.setFillColor(colors.HexColor("#10b981"))
    c.drawCentredString(marker_pos, y + h + 3.5 * mm, str(pct))

def _draw_kv(c, x, y, font, label, value, AR=False):
    c.setFont(font, 10)
    c.setFillColor(colors.HexColor("#334155"))
    
    if AR:
        # Right-to-left layout
        label_ar = _arabic_text(label)
        value_ar = _arabic_text(str(value))
        text = f"{label_ar}: {value_ar}"
        c.drawRightString(x + 170 * mm, y, text)
    else:
        c.drawString(x, y, f"{label}: ")
        c.setFont(font, 10)
        c.setFillColor(colors.black)
        c.drawString(x + 42 * mm, y, str(value))

def _draw_inputs_table(c, x, y, font, rows, AR):
    col_w = [60 * mm, 50 * mm]
    row_h = 7 * mm
    c.setFont(font, 10)
    for i, (k, v) in enumerate(rows):
        yy = y - i * row_h
        if i % 2 == 0:
            # Light green tint for alternating rows
            c.setFillColor(colors.HexColor("#f0fdf4"))
            c.rect(x, yy - row_h + 1.5 * mm, sum(col_w), row_h, stroke=0, fill=1)
        c.setFillColor(colors.black)
        
        key_text = _arabic_text(str(k)) if AR else str(k)
        val_text = _arabic_text(str(v)) if AR else str(v)
        
        if AR:
            # Right-to-left: draw key from right, value from left
            c.drawRightString(x + col_w[0] + col_w[1] - 3 * mm, yy - 4.7 * mm, key_text)
            c.drawString(x + 3 * mm, yy - 4.7 * mm, val_text)
        else:
            c.drawString(x + 3 * mm, yy - 4.7 * mm, key_text)
            c.drawRightString(x + col_w[0] + col_w[1] - 3 * mm, yy - 4.7 * mm, val_text)

def build_pdf(patient_id, patient_name, timestamp, pct, band_text, band_code, bullets, d, AR=False):
    buf = io.BytesIO()
    c = canvas.Canvas(buf, pagesize=A4)
    W, H = A4
    font_main = _setup_pdf_font(AR)
    c.setTitle("Stillbirth Risk Assessment Report")
    _draw_header(c, W, H, AR, font_main)
    y = H - 48 * mm
    c.setFont(font_main, 11)
    _draw_kv(c, 20 * mm, y, font_main, ("Timestamp" if not AR else "ÿßŸÑÿ™ÿßÿ±ŸäÿÆ"), timestamp, AR)
    y -= 7 * mm
    _draw_kv(c, 20 * mm, y, font_main, ("Patient ID" if not AR else "ÿ±ŸÇŸÖ ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ©"), patient_id, AR)
    y -= 7 * mm
    _draw_kv(c, 20 * mm, y, font_main, ("Patient Name" if not AR else "ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ©"), patient_name, AR)
    y -= 12 * mm
    _draw_badge(c, 20 * mm, y, band_code, band_text, font_main)
    c.setFont(font_main, 11)
    risk_text = f"Risk Index (0‚Äì100): {pct}" if not AR else _arabic_text(f"ŸÖÿ§ÿ¥ÿ± ÿßŸÑÿÆÿ∑Ÿàÿ±ÿ© (Ÿ†‚ÄìŸ°Ÿ†Ÿ†): {pct}")
    if AR:
        c.drawRightString(W - 20 * mm, y - 8 * mm, risk_text)
    else:
        c.drawString(20 * mm, y - 8 * mm, risk_text)
    _draw_gauge(c, 20 * mm, y - 22 * mm, 170 * mm, 8 * mm, pct, font_main, AR)
    y = y - 40 * mm
    c.setFont(font_main, 12)
    if AR:
        c.drawRightString(W - 20 * mm, y, _arabic_text("ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™"))
    else:
        c.drawString(20 * mm, y, "Notes")
    y -= 7 * mm
    c.setFont(font_main, 10)
    max_w = W - 40 * mm
    for b in bullets:
        if AR:
            line = _arabic_text(f"{b} ‚Ä¢")
        else:
            line = f"‚Ä¢ {b}"
        for ln in _wrap_lines(c, line, max_w, font_main, 10):
            if AR:
                c.drawRightString(W - 20 * mm, y, ln)
            else:
                c.drawString(20 * mm, y, ln)
            y -= 6 * mm
    y -= 6 * mm
    c.setFont(font_main, 12)
    if AR:
        c.drawRightString(W - 20 * mm, y, _arabic_text("ÿßŸÑŸÖÿØÿÆŸÑÿßÿ™"))
    else:
        c.drawString(20 * mm, y, "Inputs")
    y -= 4 * mm
    rows = [
        ("Gestational age (weeks)" if not AR else "ÿπŸÖÿ± ÿßŸÑÿ≠ŸÖŸÑ (ÿ£ÿ≥ÿßÿ®Ÿäÿπ)", d["gestational_weeks"]),
        ("BMI", d["bmi"]),
        ("Systolic BP" if not AR else "ÿßŸÑÿ∂ÿ∫ÿ∑ ÿßŸÑÿßŸÜŸÇÿ®ÿßÿ∂Ÿä", d["systolic_bp"]),
        ("Diastolic BP" if not AR else "ÿßŸÑÿ∂ÿ∫ÿ∑ ÿßŸÑÿßŸÜÿ®ÿ≥ÿßÿ∑Ÿä", d["diastolic_bp"]),
        ("Prenatal visits" if not AR else "ÿ≤Ÿäÿßÿ±ÿßÿ™ ŸÖÿß ŸÇÿ®ŸÑ ÿßŸÑŸàŸÑÿßÿØÿ©", d["prenatal_visits"]),
        ("Diabetes" if not AR else "ÿ≥ŸÉÿ±Ÿä", "yes" if d["diabetes"] == "yes" else "no"),
        ("Hypertension" if not AR else "ÿßÿ±ÿ™ŸÅÿßÿπ ÿ∂ÿ∫ÿ∑", "yes" if d["hypertension"] == "yes" else "no"),
    ]
    if AR:
        rows = [(k, ("ŸÜÿπŸÖ" if v == "yes" else "ŸÑÿß") if isinstance(v, str) else v) for k, v in rows]
    _draw_inputs_table(c, 20 * mm, y, font_main, rows, AR)
    c.showPage()
    c.save()
    return buf.getvalue()

# =============================
# Header
# =============================
# Hero card with logo inside
def get_base64_image_local(image_path):
    try:
        with open(image_path, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode('utf-8')
    except:
        return ""

# Try to load the logo
logo_b64 = get_base64_image_local("AI4Life.png")
if not logo_b64:
    logo_b64 = get_base64_image_local("Streamlit/AI4Life.png")

logo_html = f'<img src="data:image/png;base64,{logo_b64}" class="hero-logo" alt="Logo">' if logo_b64 else '<div class="hero-logo-placeholder">üè•</div>'

st.markdown(
    f'<div class="hero">'
    f'{logo_html}'
    f'<div class="hero-content">'
    f'<h1>{L("Stillbirth Risk Assessment", "ÿ™ŸÇŸäŸäŸÖ ÿÆÿ∑ÿ± ÿßŸÑÿ¨ŸÜŸäŸÜ")}</h1>'
    f'<div class="sub">{L("Clinical Decision Support System ‚Ä¢ Three-level risk stratification", "ŸÜÿ∏ÿßŸÖ ÿØÿπŸÖ ÿßŸÑŸÇÿ±ÿßÿ± ÿßŸÑÿ≥ÿ±Ÿäÿ±Ÿä ‚Ä¢ ÿ™ÿµŸÜŸäŸÅ ÿ´ŸÑÿßÿ´Ÿä ÿßŸÑŸÖÿ≥ÿ™ŸàŸäÿßÿ™ ŸÑŸÑÿÆÿ∑Ÿàÿ±ÿ©")}</div>'
    f'</div></div>',
    unsafe_allow_html=True
)
st.markdown("<br/>", unsafe_allow_html=True)

# =============================
# Patient Info form (ID + Name first)
# =============================
st.markdown(f"### {L('Patient Information', 'ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ©')}")
with st.form("patient_info_form"):
    pid_col, pname_col = st.columns([1, 2])
    patient_id = pid_col.text_input(
        L("Patient ID *", "ÿ±ŸÇŸÖ ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ© *"), 
        placeholder=L("e.g., 23-001", "ŸÖÿ´ÿßŸÑ: Ÿ¢Ÿ£-Ÿ†Ÿ†Ÿ°"),
        help=L("Required field", "ÿ≠ŸÇŸÑ ÿ•ŸÑÿ≤ÿßŸÖŸä")
    )
    patient_name = pname_col.text_input(
        L("Patient Name *", "ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ© *"), 
        placeholder=L("e.g., Sara A.", "ŸÖÿ´ÿßŸÑ: ÿ≥ÿßÿ±ÿ©"),
        help=L("Required field", "ÿ≠ŸÇŸÑ ÿ•ŸÑÿ≤ÿßŸÖŸä")
    )

    st.markdown(f"### {L('Clinical Inputs', 'ÿßŸÑŸÖÿØÿÆŸÑÿßÿ™ ÿßŸÑÿ≥ÿ±Ÿäÿ±Ÿäÿ©')}")
    
    # Basic Demographics & Pregnancy Info
    st.markdown(f"**{L('Pregnancy Information', 'ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ≠ŸÖŸÑ')}**")
    c1, c2, c3, c4 = st.columns(4)
    gestational_weeks = c1.number_input(L("Gestational age (weeks)", "ÿπŸÖÿ± ÿßŸÑÿ≠ŸÖŸÑ (ÿ®ÿßŸÑÿ£ÿ≥ÿßÿ®Ÿäÿπ)"), 20, 42, 39)
    babyweight = c2.number_input(L("Baby weight (kg)", "Ÿàÿ≤ŸÜ ÿßŸÑÿ∑ŸÅŸÑ (ŸÉÿ¨ŸÖ)"), 0.5, 6.0, 3.2, step=0.1)
    twins = c3.selectbox(L("Twins", "ÿ™Ÿàÿ£ŸÖ"), [L("No", "ŸÑÿß"), L("Yes", "ŸÜÿπŸÖ")])
    twins_val = 1 if twins in [L("Yes", "ŸÜÿπŸÖ"), "Yes", "ŸÜÿπŸÖ"] else 0
    deliverytype = c4.selectbox(L("Delivery type", "ŸÜŸàÿπ ÿßŸÑŸàŸÑÿßÿØÿ©"), [L("Vaginal", "ÿ∑ÿ®ŸäÿπŸäÿ©"), L("Cesarean", "ŸÇŸäÿµÿ±Ÿäÿ©")])
    deliverytype_val = 2 if deliverytype in [L("Cesarean", "ŸÇŸäÿµÿ±Ÿäÿ©"), "Cesarean", "ŸÇŸäÿµÿ±Ÿäÿ©"] else 1
    
    # Maternal Physical Measurements
    st.markdown(f"**{L('Maternal Measurements', 'ŸÇŸäÿßÿ≥ÿßÿ™ ÿßŸÑÿ£ŸÖ')}**")
    c1, c2, c3 = st.columns(3)
    height = c1.number_input(L("Height (cm)", "ÿßŸÑÿ∑ŸàŸÑ (ÿ≥ŸÖ)"), 130, 200, 165)
    bmi = c2.number_input("BMI", 16.0, 45.0, 27.0, step=0.1)
    year = c3.number_input(L("Year", "ÿßŸÑÿ≥ŸÜÿ©"), 2020, 2025, datetime.now().year)

    # Vital Signs
    st.markdown(f"**{L('Vital Signs', 'ÿßŸÑÿπŸÑÿßŸÖÿßÿ™ ÿßŸÑÿ≠ŸäŸàŸäÿ©')}**")
    c1, c2 = st.columns(2)
    systolic_bp = c1.number_input(L("Systolic BP (mmHg)", "ÿßŸÑÿ∂ÿ∫ÿ∑ ÿßŸÑÿßŸÜŸÇÿ®ÿßÿ∂Ÿä (ŸÖŸÑŸÖ ÿ≤ÿ¶ÿ®ŸÇ)"), 80, 220, 120)
    diastolic_bp = c2.number_input(L("Diastolic BP (mmHg)", "ÿßŸÑÿ∂ÿ∫ÿ∑ ÿßŸÑÿßŸÜÿ®ÿ≥ÿßÿ∑Ÿä (ŸÖŸÑŸÖ ÿ≤ÿ¶ÿ®ŸÇ)"), 50, 140, 75)

    # Healthcare Visits
    st.markdown(f"**{L('Healthcare Visits', 'ÿßŸÑÿ≤Ÿäÿßÿ±ÿßÿ™ ÿßŸÑÿ∑ÿ®Ÿäÿ©')}**")
    c1, c2, c3 = st.columns(3)
    prenatal_visits = c1.number_input(L("Prenatal visits", "ÿ≤Ÿäÿßÿ±ÿßÿ™ ŸÖÿß ŸÇÿ®ŸÑ ÿßŸÑŸàŸÑÿßÿØÿ©"), 0, 30, 4)
    emergency_visits = c2.number_input(L("Emergency visits", "ÿ≤Ÿäÿßÿ±ÿßÿ™ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶"), 0, 20, 0)
    inpatient_visits = c3.number_input(L("Inpatient visits", "ÿßŸÑÿ≤Ÿäÿßÿ±ÿßÿ™ ÿßŸÑÿØÿßÿÆŸÑŸäÿ©"), 0, 10, 0)

    # Medical Conditions
    st.markdown(f"**{L('Medical Conditions', 'ÿßŸÑÿ≠ÿßŸÑÿßÿ™ ÿßŸÑÿ∑ÿ®Ÿäÿ©')}**")
    c1, c2 = st.columns(2)
    diabetes = c1.selectbox(L("Diabetes", "ÿ≥ŸÉÿ±Ÿä"), [L("no", "ŸÑÿß"), L("yes", "ŸÜÿπŸÖ")])
    hypertension = c2.selectbox(L("Hypertension", "ÿßÿ±ÿ™ŸÅÿßÿπ ÿ∂ÿ∫ÿ∑"), [L("no", "ŸÑÿß"), L("yes", "ŸÜÿπŸÖ")])

    # Laboratory Tests (Optional)
    with st.expander(L("üìä Laboratory Test Results (Optional)", "üìä ŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÅÿ≠Ÿàÿµÿßÿ™ ÿßŸÑŸÖÿÆÿ®ÿ±Ÿäÿ© (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)"), expanded=False):
        c1, c2, c3 = st.columns(3)
        creatinine_mean = c1.number_input(L("Creatinine (mg/dL)", "ÿßŸÑŸÉÿ±Ÿäÿßÿ™ŸäŸÜŸäŸÜ"), 0.0, 5.0, 0.0, step=0.1, help=L("Leave 0 if not available", "ÿßÿ™ÿ±ŸÉ 0 ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸÖÿ™ÿßÿ≠Ÿãÿß"))
        hba1c_mean = c2.number_input(L("HbA1c (%)", "ÿßŸÑŸáŸäŸÖŸàÿ∫ŸÑŸàÿ®ŸäŸÜ ÿßŸÑÿ≥ŸÉÿ±Ÿä"), 0.0, 15.0, 0.0, step=0.1, help=L("Leave 0 if not available", "ÿßÿ™ÿ±ŸÉ 0 ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸÖÿ™ÿßÿ≠Ÿãÿß"))
        potassium_mean = c3.number_input(L("Potassium (mmol/L)", "ÿßŸÑÿ®Ÿàÿ™ÿßÿ≥ŸäŸàŸÖ"), 0.0, 10.0, 0.0, step=0.1, help=L("Leave 0 if not available", "ÿßÿ™ÿ±ŸÉ 0 ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸÖÿ™ÿßÿ≠Ÿãÿß"))

    # Medications (Optional)
    with st.expander(L("üíä Medications (Optional)", "üíä ÿßŸÑÿ£ÿØŸàŸäÿ© (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)"), expanded=False):
        c1, c2 = st.columns(2)
        ferric_times = c1.number_input(L("Ferric carboxymaltose (times)", "ÿ≠ŸÇŸÜ ÿßŸÑÿ≠ÿØŸäÿØ (ÿπÿØÿØ ÿßŸÑŸÖÿ±ÿßÿ™)"), 0, 20, 0, help=L("Number of times prescribed", "ÿπÿØÿØ ŸÖÿ±ÿßÿ™ ÿßŸÑŸàÿµŸÅ"))
        metoprolol_times = c2.number_input(L("Metoprolol (times)", "ŸÖŸäÿ™Ÿàÿ®ÿ±ŸàŸÑŸàŸÑ (ÿπÿØÿØ ÿßŸÑŸÖÿ±ÿßÿ™)"), 0, 50, 0, help=L("Number of times prescribed", "ÿπÿØÿØ ŸÖÿ±ÿßÿ™ ÿßŸÑŸàÿµŸÅ"))

    submitted = st.form_submit_button(L("Evaluate", "ÿ™ŸÇŸäŸäŸÖ"), use_container_width=True)

# =============================
# Result (3-level gauge + PDF)
# =============================
if submitted:
    # Validate Patient ID and Name
    if not patient_id or not patient_id.strip():
        st.error(L(
            "‚ùå **Patient ID is required!** Please enter a Patient ID before evaluating.",
            "‚ùå **ÿ±ŸÇŸÖ ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ© ŸÖÿ∑ŸÑŸàÿ®!** ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ÿ±ŸÇŸÖ ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ© ŸÇÿ®ŸÑ ÿßŸÑÿ™ŸÇŸäŸäŸÖ."
        ))
        st.stop()
    
    if not patient_name or not patient_name.strip():
        st.error(L(
            "‚ùå **Patient Name is required!** Please enter a Patient Name before evaluating.",
            "‚ùå **ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ© ŸÖÿ∑ŸÑŸàÿ®!** ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ•ÿØÿÆÿßŸÑ ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ© ŸÇÿ®ŸÑ ÿßŸÑÿ™ŸÇŸäŸäŸÖ."
        ))
        st.stop()
    
    def yn2en(x):
        return "yes" if (AR and x == "ŸÜÿπŸÖ") else ("no" if (AR and x == "ŸÑÿß") else x)

    # Prepare input dictionary for XGBoost model
    user_input = {
        "gestational_weeks": gestational_weeks,
        "babyweight": babyweight,
        "prenatal_visits": prenatal_visits,
        "total_emergency_visits": emergency_visits,
        "height": height,
        "bmi": bmi,
        "systolic_bp": systolic_bp,
        "diastolic_bp": diastolic_bp,
        "diabetes": yn2en(diabetes),
        "hypertension": yn2en(hypertension),
        "creatinine_mean": creatinine_mean,
        "hba1c_mean": hba1c_mean,
        "potassium_mean": potassium_mean,
        "ferric_carboxymaltose_times": ferric_times,
        "metoprolol_times": metoprolol_times,
        "total_inpatient_visits": inpatient_visits,
        "twins": twins_val,
        "deliverytype": deliverytype_val,
        "year": year
    }
    
    # Get prediction from XGBoost model
    try:
        prediction = preprocessing.predict_risk(user_input)
        pct = prediction['risk_percentage']
        band_text = L(prediction['risk_level'], 
                     "ŸÖŸÜÿÆŸÅÿ∂" if prediction['risk_level'] == "Low" else 
                     ("ŸÖÿ™Ÿàÿ≥ÿ∑" if prediction['risk_level'] == "Moderate" else "ŸÖÿ±ÿ™ŸÅÿπ"))
        badge_code = prediction['risk_band']
    except Exception as e:
        st.error(L(f"Error loading model: {str(e)}", f"ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨: {str(e)}"))
        st.stop()
    
    # For backward compatibility with PDF generation
    d = {
        "maternal_age": 0,  # Not used in new model
        "gestational_weeks": gestational_weeks,
        "bmi": bmi,
        "systolic_bp": systolic_bp,
        "diastolic_bp": diastolic_bp,
        "prenatal_visits": prenatal_visits,
        "prev_stillbirth": "no",  # Not used in new model
        "diabetes": yn2en(diabetes),
        "hypertension": yn2en(hypertension),
        "smoker": "no"  # Not used in new model
    }
    
    # Try to use LLM for intelligent explanation, fallback to rule-based
    try:
        bullets = openrouter_explain_risk(band_text, pct, user_input, AR)
    except Exception as e:
        # Use fallback explanation
        bullets = explanation_for_band(d, band_text, user_input)

    st.markdown(f"### {L('Risk Assessment', 'ÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿÆÿ∑Ÿàÿ±ÿ©')}", unsafe_allow_html=True)
    range_txt = L("Bands: Low 0‚Äì33 ‚Ä¢ Moderate 34‚Äì66 ‚Ä¢ High 67‚Äì100", "ÿßŸÑŸÖÿ≥ÿ™ŸàŸäÿßÿ™: ŸÖŸÜÿÆŸÅÿ∂ Ÿ†‚ÄìŸ£Ÿ£ ‚Ä¢ ŸÖÿ™Ÿàÿ≥ÿ∑ Ÿ£Ÿ§‚ÄìŸ¶Ÿ¶ ‚Ä¢ ŸÖÿ±ÿ™ŸÅÿπ Ÿ¶Ÿß‚ÄìŸ°Ÿ†Ÿ†")
    st.markdown(
        f'<div class="lab-wrap"><div class="lab-head"><div class="lab-name">{L("Risk Index", "ŸÖÿ§ÿ¥ÿ± ÿßŸÑÿÆÿ∑Ÿàÿ±ÿ©")}</div>'
        f'<div class="lab-ref"><div style="text-align:right"><div style="font-size:1.25rem;font-weight:800">{pct}</div>'
        f'<div>{range_txt}</div></div></div></div>',
        unsafe_allow_html=True
    )
    # For Arabic (RTL), reverse the gauge colors and labels
    if AR:
        # Arabic: High (red) on left, Moderate (yellow) in center, Low (green) on right
        lbls = ["ŸÖÿ±ÿ™ŸÅÿπ", "ŸÖÿ™Ÿàÿ≥ÿ∑", "ŸÖŸÜÿÆŸÅÿ∂"]
        st.markdown(
            f'<div class="lab-band"><div class="seg green" style="width:33%"></div>'
            f'<div class="seg amber" style="width:34%"></div>'
            f'<div class="seg red" style="width:33%"></div></div>'
            f'<div class="lab-labels"><span>{lbls[2]}</span><span>{lbls[1]}</span><span>{lbls[0]}</span></div>',
            unsafe_allow_html=True
        )
        # Reverse marker position for RTL
        marker_position = max(2, min(98, 100 - pct))
    else:
        # English: Low (green) on left, Moderate (yellow) in center, High (red) on right
        lbls = ["Low", "Moderate", "High"]
        st.markdown(
            f'<div class="lab-band"><div class="seg green" style="width:33%"></div>'
            f'<div class="seg amber" style="width:34%"></div>'
            f'<div class="seg red" style="width:33%"></div></div>'
            f'<div class="lab-labels"><span>{lbls[0]}</span><span>{lbls[1]}</span><span>{lbls[2]}</span></div>',
            unsafe_allow_html=True
        )
        marker_position = max(2, min(98, pct))
    
    st.markdown(
        f'<div class="marker" style="height:38px;"><div class="pin" style="left:{marker_position}%"></div>'
        f'<div class="pill" style="left:{marker_position}%">{pct}</div></div>',
        unsafe_allow_html=True
    )
    st.markdown("<hr class='soft'/>", unsafe_allow_html=True)
    st.markdown(f"**{L('Explanation', 'ÿ™Ÿàÿ∂Ÿäÿ≠')}**")
    for line in bullets:
        st.write(f"- {line}")

    # Save to history
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    st.session_state.history.loc[len(st.session_state.history)] = [
        timestamp, patient_id, patient_name, band_text, pct,
        " | ".join(bullets),
        gestational_weeks, babyweight, bmi, height,
        systolic_bp, diastolic_bp, prenatal_visits,
        emergency_visits, inpatient_visits,
        L("yes", "ŸÜÿπŸÖ") if diabetes in [L("yes", "ŸÜÿπŸÖ"), "yes", "ŸÜÿπŸÖ"] else L("no", "ŸÑÿß"),
        L("yes", "ŸÜÿπŸÖ") if hypertension in [L("yes", "ŸÜÿπŸÖ"), "yes", "ŸÜÿπŸÖ"] else L("no", "ŸÑÿß"),
        twins_val,
        deliverytype_val,
    ]

    # Build and download PDF
    pdf_bytes = build_pdf(
        patient_id=patient_id,
        patient_name=patient_name,
        timestamp=timestamp,
        pct=pct,
        band_text=band_text,
        band_code=badge_code,
        bullets=bullets,
        d=d,
        AR=AR
    )

    st.download_button(
        label=L("‚¨áÔ∏è Download Result (PDF)", "‚¨áÔ∏è ÿ™ŸÜÿ≤ŸäŸÑ ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ© (PDF)"),
        data=pdf_bytes,
        file_name=f"{patient_id}_risk_report.pdf",
        mime="application/pdf",
        use_container_width=True
    )

# =============================
# Statistics Cards
# =============================
stats = calculate_statistics()
st.markdown(f"<h2 class='section-header'>{L('Case Statistics', 'ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑÿ≠ÿßŸÑÿßÿ™')}</h2>", unsafe_allow_html=True)

stats_cols = st.columns(4)
with stats_cols[0]:
    st.markdown(
        f"""
        <div class="stat-card">
            <span class="stat-number">{stats['total_cases']}</span>
            <span class="stat-title">{L('Total Cases', 'ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ≠ÿßŸÑÿßÿ™')}</span>
        </div>
        """,
        unsafe_allow_html=True
    )
with stats_cols[1]:
    st.markdown(
        f"""
        <div class="stat-card">
            <span class="stat-number">{stats['low_risk']}</span>
            <span class="stat-title">{L('Low Risk', 'ŸÖŸÜÿÆŸÅÿ∂ ÿßŸÑÿÆÿ∑Ÿàÿ±ÿ©')}</span>
        </div>
        """,
        unsafe_allow_html=True
    )
with stats_cols[2]:
    st.markdown(
        f"""
        <div class="stat-card">
            <span class="stat-number">{stats['moderate_risk']}</span>
            <span class="stat-title">{L('Moderate Risk', 'ŸÖÿ™Ÿàÿ≥ÿ∑ ÿßŸÑÿÆÿ∑Ÿàÿ±ÿ©')}</span>
        </div>
        """,
        unsafe_allow_html=True
    )
with stats_cols[3]:
    st.markdown(
        f"""
        <div class="stat-card">
            <span class="stat-number">{stats['high_risk']}</span>
            <span class="stat-title">{L('High Risk', 'ŸÖÿ±ÿ™ŸÅÿπ ÿßŸÑÿÆÿ∑Ÿàÿ±ÿ©')}</span>
        </div>
        """,
        unsafe_allow_html=True
    )

# =============================
# Dashboard Containers with Interactivity
# =============================
st.markdown(f"<h2 class='section-header'>{L('Clinical Dashboard', 'ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ ÿßŸÑÿ≥ÿ±Ÿäÿ±Ÿäÿ©')}</h2>", unsafe_allow_html=True)

# Initialize session state for dashboard sections
if "show_labs" not in st.session_state:
    st.session_state.show_labs = False
if "show_meds" not in st.session_state:
    st.session_state.show_meds = False
if "show_records" not in st.session_state:
    st.session_state.show_records = False

dashboard_cols = st.columns(3)

with dashboard_cols[0]:
    if st.button(
        L('üî¨\n\nLaboratory Tests\n\nView and manage patient lab results', 
          'üî¨\n\nÿßŸÑÿ™ÿ≠ÿßŸÑŸäŸÑ ÿßŸÑŸÖÿÆÿ®ÿ±Ÿäÿ©\n\nÿπÿ±ÿ∂ Ÿàÿ•ÿØÿßÿ±ÿ© ŸÜÿ™ÿßÿ¶ÿ¨ ŸÖÿÆÿ™ÿ®ÿ± ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ©'),
        key="lab_btn",
        use_container_width=True
    ):
        st.session_state.show_labs = not st.session_state.show_labs
        st.session_state.show_meds = False
        st.session_state.show_records = False

with dashboard_cols[1]:
    if st.button(
        L('üíä\n\nMedications\n\nManage prescribed medications and dosage', 
          'üíä\n\nÿßŸÑÿ£ÿØŸàŸäÿ©\n\nÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ£ÿØŸàŸäÿ© ÿßŸÑŸÖŸàÿµŸàŸÅÿ© ŸàÿßŸÑÿ¨ÿ±ÿπÿßÿ™'),
        key="med_btn",
        use_container_width=True
    ):
        st.session_state.show_meds = not st.session_state.show_meds
        st.session_state.show_labs = False
        st.session_state.show_records = False

with dashboard_cols[2]:
    if st.button(
        L('üìã\n\nMedical Records\n\nAccess complete patient medical history', 
          'üìã\n\nÿßŸÑÿ≥ÿ¨ŸÑ ÿßŸÑÿ∑ÿ®Ÿä\n\nÿßŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ÿßŸÑÿ≥ÿ¨ŸÑ ÿßŸÑÿ∑ÿ®Ÿä ÿßŸÑŸÉÿßŸÖŸÑ ŸÑŸÑŸÖÿ±Ÿäÿ∂ÿ©'),
        key="rec_btn",
        use_container_width=True
    ):
        st.session_state.show_records = not st.session_state.show_records
        st.session_state.show_labs = False
        st.session_state.show_meds = False

# Display content based on selection
if st.session_state.show_labs:
    with st.expander(L("üî¨ Laboratory Tests Details", "üî¨ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ™ÿ≠ÿßŸÑŸäŸÑ ÿßŸÑŸÖÿÆÿ®ÿ±Ÿäÿ©"), expanded=True):
        st.markdown(f"### {L('Common Prenatal Laboratory Tests', 'ÿßŸÑÿ™ÿ≠ÿßŸÑŸäŸÑ ÿßŸÑŸÖÿÆÿ®ÿ±Ÿäÿ© ÿßŸÑÿ¥ÿßÿ¶ÿπÿ© ŸÇÿ®ŸÑ ÿßŸÑŸàŸÑÿßÿØÿ©')}")
        
        # Sample lab data
        lab_data = {
            L("Test Name", "ÿßÿ≥ŸÖ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ"): [
                L("Hemoglobin (Hb)", "ÿßŸÑŸáŸäŸÖŸàÿ¨ŸÑŸàÿ®ŸäŸÜ"),
                L("Blood Glucose", "ÿ≥ŸÉÿ± ÿßŸÑÿØŸÖ"),
                L("Blood Pressure", "ÿ∂ÿ∫ÿ∑ ÿßŸÑÿØŸÖ"),
                L("Urine Protein", "ÿ®ÿ±Ÿàÿ™ŸäŸÜ ÿßŸÑÿ®ŸàŸÑ"),
                L("Platelets", "ÿßŸÑÿµŸÅÿßÿ¶ÿ≠ ÿßŸÑÿØŸÖŸàŸäÿ©")
            ],
            L("Normal Range", "ÿßŸÑŸÖÿπÿØŸÑ ÿßŸÑÿ∑ÿ®ŸäÿπŸä"): [
                "12-16 g/dL",
                "70-100 mg/dL",
                "90-120/60-80 mmHg",
                L("Negative", "ÿ≥ŸÑÿ®Ÿä"),
                "150-400 √ó 10¬≥/¬µL"
            ],
            L("Status", "ÿßŸÑÿ≠ÿßŸÑÿ©"): [
                L("Normal", "ÿ∑ÿ®ŸäÿπŸä"),
                L("Normal", "ÿ∑ÿ®ŸäÿπŸä"),
                L("Normal", "ÿ∑ÿ®ŸäÿπŸä"),
                L("Normal", "ÿ∑ÿ®ŸäÿπŸä"),
                L("Normal", "ÿ∑ÿ®ŸäÿπŸä")
            ]
        }
        
        df_labs = pd.DataFrame(lab_data)
        st.dataframe(df_labs, use_container_width=True, hide_index=True)
        
        st.info(L(
            "üí° **Note:** These are sample values. Actual patient lab results would be displayed here in a production environment.",
            "üí° **ŸÖŸÑÿßÿ≠ÿ∏ÿ©:** Ÿáÿ∞Ÿá ŸÇŸäŸÖ ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ©. ÿ≥Ÿäÿ™ŸÖ ÿπÿ±ÿ∂ ŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÖÿÆÿ™ÿ®ÿ± ÿßŸÑŸÅÿπŸÑŸäÿ© ŸÑŸÑŸÖÿ±Ÿäÿ∂ÿ© ŸáŸÜÿß ŸÅŸä ÿ®Ÿäÿ¶ÿ© ÿßŸÑÿ•ŸÜÿ™ÿßÿ¨."
        ))

if st.session_state.show_meds:
    with st.expander(L("üíä Medications Details", "üíä ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ£ÿØŸàŸäÿ©"), expanded=True):
        st.markdown(f"### {L('Prescribed Medications', 'ÿßŸÑÿ£ÿØŸàŸäÿ© ÿßŸÑŸÖŸàÿµŸàŸÅÿ©')}")
        
        # Sample medication data
        med_data = {
            L("Medication", "ÿßŸÑÿØŸàÿßÿ°"): [
                L("Prenatal Vitamins", "ŸÅŸäÿ™ÿßŸÖŸäŸÜÿßÿ™ ŸÖÿß ŸÇÿ®ŸÑ ÿßŸÑŸàŸÑÿßÿØÿ©"),
                L("Folic Acid", "ÿ≠ŸÖÿ∂ ÿßŸÑŸÅŸàŸÑŸäŸÉ"),
                L("Iron Supplement", "ŸÖŸÉŸÖŸÑÿßÿ™ ÿßŸÑÿ≠ÿØŸäÿØ"),
                L("Calcium", "ÿßŸÑŸÉÿßŸÑÿ≥ŸäŸàŸÖ")
            ],
            L("Dosage", "ÿßŸÑÿ¨ÿ±ÿπÿ©"): [
                L("1 tablet daily", "ŸÇÿ±ÿµ Ÿàÿßÿ≠ÿØ ŸäŸàŸÖŸäÿßŸã"),
                "400 mcg " + L("daily", "ŸäŸàŸÖŸäÿßŸã"),
                "30 mg " + L("daily", "ŸäŸàŸÖŸäÿßŸã"),
                "1000 mg " + L("daily", "ŸäŸàŸÖŸäÿßŸã")
            ],
            L("Frequency", "ÿßŸÑÿ™ŸÉÿ±ÿßÿ±"): [
                L("Once daily", "ŸÖÿ±ÿ© ŸäŸàŸÖŸäÿßŸã"),
                L("Once daily", "ŸÖÿ±ÿ© ŸäŸàŸÖŸäÿßŸã"),
                L("Once daily", "ŸÖÿ±ÿ© ŸäŸàŸÖŸäÿßŸã"),
                L("Twice daily", "ŸÖÿ±ÿ™ŸäŸÜ ŸäŸàŸÖŸäÿßŸã")
            ],
            L("Duration", "ÿßŸÑŸÖÿØÿ©"): [
                L("Throughout pregnancy", "ÿ∑ŸàÿßŸÑ ŸÅÿ™ÿ±ÿ© ÿßŸÑÿ≠ŸÖŸÑ"),
                L("First trimester", "ÿßŸÑÿ´ŸÑÿ´ ÿßŸÑÿ£ŸàŸÑ"),
                L("Throughout pregnancy", "ÿ∑ŸàÿßŸÑ ŸÅÿ™ÿ±ÿ© ÿßŸÑÿ≠ŸÖŸÑ"),
                L("Throughout pregnancy", "ÿ∑ŸàÿßŸÑ ŸÅÿ™ÿ±ÿ© ÿßŸÑÿ≠ŸÖŸÑ")
            ]
        }
        
        df_meds = pd.DataFrame(med_data)
        st.dataframe(df_meds, use_container_width=True, hide_index=True)
        
        st.info(L(
            "üí° **Note:** These are sample medications. Actual patient prescriptions would be displayed here in a production environment.",
            "üí° **ŸÖŸÑÿßÿ≠ÿ∏ÿ©:** Ÿáÿ∞Ÿá ÿ£ÿØŸàŸäÿ© ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ©. ÿ≥Ÿäÿ™ŸÖ ÿπÿ±ÿ∂ ÿßŸÑŸàÿµŸÅÿßÿ™ ÿßŸÑÿ∑ÿ®Ÿäÿ© ÿßŸÑŸÅÿπŸÑŸäÿ© ŸÑŸÑŸÖÿ±Ÿäÿ∂ÿ© ŸáŸÜÿß ŸÅŸä ÿ®Ÿäÿ¶ÿ© ÿßŸÑÿ•ŸÜÿ™ÿßÿ¨."
        ))

if st.session_state.show_records:
    with st.expander(L("üìã Medical Records Details", "üìã ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿ≥ÿ¨ŸÑ ÿßŸÑÿ∑ÿ®Ÿä"), expanded=True):
        st.markdown(f"### {L('Patient Medical History', 'ÿßŸÑÿ≥ÿ¨ŸÑ ÿßŸÑÿ∑ÿ®Ÿä ŸÑŸÑŸÖÿ±Ÿäÿ∂ÿ©')}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"**{L('Personal Information', 'ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ¥ÿÆÿµŸäÿ©')}**")
            st.write(f"‚Ä¢ {L('Age', 'ÿßŸÑÿπŸÖÿ±')}: 28 {L('years', 'ÿ≥ŸÜÿ©')}")
            st.write(f"‚Ä¢ {L('Blood Type', 'ŸÅÿµŸäŸÑÿ© ÿßŸÑÿØŸÖ')}: O+")
            st.write(f"‚Ä¢ {L('Allergies', 'ÿßŸÑÿ≠ÿ≥ÿßÿ≥Ÿäÿ©')}: {L('None reported', 'ŸÑÿß ŸäŸàÿ¨ÿØ')}")
            
            st.markdown(f"**{L('Previous Pregnancies', 'ÿßŸÑÿ≠ŸÖŸÑ ÿßŸÑÿ≥ÿßÿ®ŸÇ')}**")
            st.write(f"‚Ä¢ {L('Gravida', 'ÿßŸÑÿ≠ŸÖŸÑ')}: 2")
            st.write(f"‚Ä¢ {L('Para', 'ÿßŸÑŸàŸÑÿßÿØÿ©')}: 1")
            st.write(f"‚Ä¢ {L('Abortions', 'ÿßŸÑÿ•ÿ¨Ÿáÿßÿ∂')}: 0")
        
        with col2:
            st.markdown(f"**{L('Chronic Conditions', 'ÿßŸÑÿ£ŸÖÿ±ÿßÿ∂ ÿßŸÑŸÖÿ≤ŸÖŸÜÿ©')}**")
            st.write(f"‚Ä¢ {L('Diabetes', 'ÿßŸÑÿ≥ŸÉÿ±Ÿä')}: {L('No', 'ŸÑÿß')}")
            st.write(f"‚Ä¢ {L('Hypertension', 'ÿßÿ±ÿ™ŸÅÿßÿπ ÿ∂ÿ∫ÿ∑ ÿßŸÑÿØŸÖ')}: {L('No', 'ŸÑÿß')}")
            st.write(f"‚Ä¢ {L('Heart Disease', 'ÿ£ŸÖÿ±ÿßÿ∂ ÿßŸÑŸÇŸÑÿ®')}: {L('No', 'ŸÑÿß')}")
            
            st.markdown(f"**{L('Recent Visits', 'ÿßŸÑÿ≤Ÿäÿßÿ±ÿßÿ™ ÿßŸÑÿ£ÿÆŸäÿ±ÿ©')}**")
            st.write(f"‚Ä¢ {L('Last Visit', 'ÿ¢ÿÆÿ± ÿ≤Ÿäÿßÿ±ÿ©')}: {L('2 weeks ago', 'ŸÖŸÜÿ∞ ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ')}")
            st.write(f"‚Ä¢ {L('Next Appointment', 'ÿßŸÑŸÖŸàÿπÿØ ÿßŸÑŸÇÿßÿØŸÖ')}: {L('1 week', 'ÿ£ÿ≥ÿ®Ÿàÿπ Ÿàÿßÿ≠ÿØ')}")
        
        st.markdown("---")
        
        st.markdown(f"**{L('Notes', 'ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™')}**")
        st.info(L(
            "Patient is in good general health. Regular prenatal checkups recommended. Continue current medication regimen.",
            "ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ© ŸÅŸä ÿµÿ≠ÿ© ÿπÿßŸÖÿ© ÿ¨ŸäÿØÿ©. ŸäŸèŸÜÿµÿ≠ ÿ®ÿ•ÿ¨ÿ±ÿßÿ° ŸÅÿ≠Ÿàÿµÿßÿ™ ŸÖŸÜÿ™ÿ∏ŸÖÿ© ŸÇÿ®ŸÑ ÿßŸÑŸàŸÑÿßÿØÿ©. ÿßŸÑÿßÿ≥ÿ™ŸÖÿ±ÿßÿ± ŸÅŸä ŸÜÿ∏ÿßŸÖ ÿßŸÑÿØŸàÿßÿ° ÿßŸÑÿ≠ÿßŸÑŸä."
        ))
        
        st.info(L(
            "üí° **Note:** This is sample medical record data. Actual patient records would be displayed here in a production environment.",
            "üí° **ŸÖŸÑÿßÿ≠ÿ∏ÿ©:** Ÿáÿ∞ÿß ÿ≥ÿ¨ŸÑ ÿ∑ÿ®Ÿä ÿ™ÿ¨ÿ±Ÿäÿ®Ÿä. ÿ≥Ÿäÿ™ŸÖ ÿπÿ±ÿ∂ ÿßŸÑÿ≥ÿ¨ŸÑ ÿßŸÑÿ∑ÿ®Ÿä ÿßŸÑŸÅÿπŸÑŸä ŸÑŸÑŸÖÿ±Ÿäÿ∂ÿ© ŸáŸÜÿß ŸÅŸä ÿ®Ÿäÿ¶ÿ© ÿßŸÑÿ•ŸÜÿ™ÿßÿ¨."
        ))

# =============================
# History (styled container)
# =============================
st.markdown(f"<h2 class='section-header'>{L('Patient History', 'ÿ≥ÿ¨ŸÑ ÿßŸÑÿ≠ÿßŸÑÿßÿ™')}</h2>", unsafe_allow_html=True)
q = st.text_input(L("Search (ID/Name)", "ÿ®ÿ≠ÿ´ (ÿ±ŸÇŸÖ/ÿßÿ≥ŸÖ)"), key="hist_q")
df = st.session_state.history.copy()
if q:
    df = df[df["patient_name"].str.contains(q, case=False, na=False) | df["patient_id"].str.contains(q, case=False, na=False)]

# Display the history table
st.dataframe(
    df[["timestamp", "patient_id", "patient_name", "risk_level", "score_pct", "explanation"]]
    .sort_values("timestamp", ascending=False),
    use_container_width=True
)

# CSV Export
col_map_en = {
    "timestamp": "timestamp", "patient_id": "patient_id", "patient_name": "patient_name",
    "risk_level": "risk_level", "score_pct": "score_pct", "explanation": "explanation",
    "gestational_weeks": "gestational_weeks", "babyweight": "babyweight", "bmi": "bmi", "height": "height",
    "systolic_bp": "systolic_bp", "diastolic_bp": "diastolic_bp", "prenatal_visits": "prenatal_visits",
    "emergency_visits": "emergency_visits", "inpatient_visits": "inpatient_visits",
    "diabetes": "diabetes", "hypertension": "hypertension", "twins": "twins", "deliverytype": "deliverytype"
}

col_map_ar = {
    "timestamp": "ÿßŸÑÿ™ÿßÿ±ŸäÿÆ", "patient_id": "ÿ±ŸÇŸÖ ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ©", "patient_name": "ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ±Ÿäÿ∂ÿ©",
    "risk_level": "ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿÆÿ∑Ÿàÿ±ÿ©", "score_pct": "ÿßŸÑŸÖÿ§ÿ¥ÿ±", "explanation": "ÿ™Ÿàÿ∂Ÿäÿ≠",
    "gestational_weeks": "ÿπŸÖÿ± ÿßŸÑÿ≠ŸÖŸÑ (ÿ£ÿ≥ÿßÿ®Ÿäÿπ)", "babyweight": "Ÿàÿ≤ŸÜ ÿßŸÑÿ∑ŸÅŸÑ", "bmi": "ŸÖÿ§ÿ¥ÿ± ŸÉÿ™ŸÑÿ© ÿßŸÑÿ¨ÿ≥ŸÖ", "height": "ÿßŸÑÿ∑ŸàŸÑ",
    "systolic_bp": "ÿßŸÑÿ∂ÿ∫ÿ∑ ÿßŸÑÿßŸÜŸÇÿ®ÿßÿ∂Ÿä", "diastolic_bp": "ÿßŸÑÿ∂ÿ∫ÿ∑ ÿßŸÑÿßŸÜÿ®ÿ≥ÿßÿ∑Ÿä", "prenatal_visits": "ÿ≤Ÿäÿßÿ±ÿßÿ™ ŸÇÿ®ŸÑ ÿßŸÑŸàŸÑÿßÿØÿ©",
    "emergency_visits": "ÿ≤Ÿäÿßÿ±ÿßÿ™ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶", "inpatient_visits": "ÿßŸÑÿ≤Ÿäÿßÿ±ÿßÿ™ ÿßŸÑÿØÿßÿÆŸÑŸäÿ©",
    "diabetes": "ÿ≥ŸÉÿ±Ÿä", "hypertension": "ÿßÿ±ÿ™ŸÅÿßÿπ ÿ∂ÿ∫ÿ∑", "twins": "ÿ™Ÿàÿ£ŸÖ", "deliverytype": "ŸÜŸàÿπ ÿßŸÑŸàŸÑÿßÿØÿ©"
}

col_map = col_map_ar if AR else col_map_en

# Ensure the DataFrame has the expected columns
expected_columns = [
    "timestamp", "patient_id", "patient_name", "risk_level", "score_pct", "explanation",
    "gestational_weeks", "babyweight", "bmi", "height", "systolic_bp", "diastolic_bp", "prenatal_visits",
    "emergency_visits", "inpatient_visits", "diabetes", "hypertension", "twins", "deliverytype"
]

# Create a copy of the DataFrame with only the expected columns
df_renamed = st.session_state.history[expected_columns].copy()

# Rename the columns
df_renamed = df_renamed.rename(columns=col_map)

# Write to BytesIO with UTF-8 encoding
csv_bytes = io.BytesIO()
df_renamed.to_csv(csv_bytes, index=False, encoding="utf-8-sig")
csv_bytes.seek(0)

st.markdown('<div class="download-history-btn">', unsafe_allow_html=True)
st.download_button(
    label=L("‚¨áÔ∏è Download history (CSV)", "‚¨áÔ∏è ÿ™ŸÜÿ≤ŸäŸÑ ÿßŸÑÿ≥ÿ¨ŸÑ (CSV)"),
    data=csv_bytes,
    file_name=L("patient_history.csv", "ÿ≥ÿ¨ŸÑ_ÿßŸÑÿ≠ÿßŸÑÿßÿ™.csv"),
    mime="text/csv",
    use_container_width=True
)
st.markdown('</div>', unsafe_allow_html=True)

st.markdown(f'<div class="small">{L("Results are stored temporarily. Export CSV to keep them.", "ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿ™Ÿèÿ≠ŸÅÿ∏ ŸÖÿ§ŸÇÿ™Ÿãÿß. ÿµÿØŸëÿ± CSV ŸÑŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®Ÿáÿß.")}</div>', unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)
